
<%- include('../partials/header', { title: title, user: user }) %>

<div class="orders-container">
  <div class="orders-header">
    <h1>📦 My Orders</h1>
    <p>Track your order history and current deliveries</p>
  </div>

  <% if (orders && orders.length > 0) { %>
    <div class="orders-stats">
      <div class="stat-item">
        <span class="stat-number"><%= orders.length %></span>
        <span class="stat-label">Total Orders</span>
      </div>
      <div class="stat-item">
        <span class="stat-number">$<%= orders.reduce((sum, o) => sum + o.totalAmount, 0).toFixed(2) %></span>
        <span class="stat-label">Total Spent</span>
      </div>
      <div class="stat-item">
        <span class="stat-number"><%= orders.filter(o => o.status === 'delivered').length %></span>
        <span class="stat-label">Delivered</span>
      </div>
    </div>

    <div class="orders-grid">
      <% orders.forEach(order => { %>
        <div class="order-card">
          <div class="order-header">
            <div class="order-info">
              <h3>Order #<%= order.id %></h3>
              <span class="order-date">
                <%= new Date(order.createdAt).toLocaleDateString('en-US', { 
                  year: 'numeric', 
                  month: 'short', 
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                }) %>
              </span>
            </div>
            <div class="order-status-wrapper">
              <span class="order-status <%= order.status %>">
                <% if (order.status === 'pending') { %>
                  ⏳ Pending
                <% } else if (order.status === 'confirmed') { %>
                  ✅ Confirmed
                <% } else if (order.status === 'preparing') { %>
                  👨‍🍳 Preparing
                <% } else if (order.status === 'ready') { %>
                  🍽️ Ready
                <% } else if (order.status === 'delivering') { %>
                  🚗 Delivering
                <% } else if (order.status === 'delivered') { %>
                  ✅ Delivered
                <% } else if (order.status === 'cancelled') { %>
                  ❌ Cancelled
                <% } else { %>
                  📦 <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                <% } %>
              </span>
            </div>
          </div>

          <div class="order-items">
            <h4>Items Ordered:</h4>
            <div class="items-list">
              <% 
                let items = [];
                try {
                  items = JSON.parse(order.items);
                } catch (e) {
                  items = [];
                }
              %>
              <% if (items && items.length > 0) { %>
                <% items.forEach(item => { %>
                  <div class="order-item">
                    <span class="item-name"><%= item.name || item.foodName %></span>
                    <span class="item-details">
                      × <%= item.qty || item.quantity || 1 %> 
                      @ $<%= (item.price || 0).toFixed(2) %>
                    </span>
                    <span class="item-subtotal">
                      $<%= ((item.price || 0) * (item.qty || item.quantity || 1)).toFixed(2) %>
                    </span>
                  </div>
                <% }) %>
              <% } else { %>
                <div class="order-item">
                  <span class="item-name">Order details unavailable</span>
                  <span class="item-details">Please contact support</span>
                  <span class="item-subtotal">--</span>
                </div>
              <% } %>
            </div>
          </div>

          <div class="order-total">
            <div class="total-breakdown">
              <div class="total-row">
                <span>Subtotal:</span>
                <span>$<%= order.totalAmount.toFixed(2) %></span>
              </div>
              <div class="total-row">
                <span>Delivery:</span>
                <span>$4.99</span>
              </div>
              <div class="total-row">
                <span>Tax:</span>
                <span>$<%= (order.totalAmount * 0.13).toFixed(2) %></span>
              </div>
              <div class="total-row total-final">
                <span>Total:</span>
                <span>$<%= (order.totalAmount + 4.99 + (order.totalAmount * 0.13)).toFixed(2) %></span>
              </div>
            </div>
          </div>

          <div class="order-actions">
            <% if (order.status === 'delivered') { %>
              <button onclick="reorderItems(<%= order.id %>)" class="action-btn reorder">
                🔄 Reorder
              </button>
              <button onclick="leaveReview(<%= order.id %>)" class="action-btn review">
                ⭐ Leave Review
              </button>
            <% } else if (order.status === 'pending' || order.status === 'confirmed') { %>
              <button onclick="cancelOrder(<%= order.id %>)" class="action-btn cancel">
                ❌ Cancel Order
              </button>
            <% } %>
            
            <% if (order.status === 'delivering' || order.status === 'ready') { %>
              <button onclick="trackOrder(<%= order.id %>)" class="action-btn track">
                📍 Track Order
              </button>
            <% } %>
            
            <button onclick="viewOrderDetails(<%= order.id %>)" class="action-btn details">
              📋 View Details
            </button>
          </div>

          <!-- Order Progress Bar -->
          <div class="order-progress">
            <div class="progress-bar">
              <% 
                const statuses = ['pending', 'confirmed', 'preparing', 'ready', 'delivering', 'delivered'];
                const currentIndex = statuses.indexOf(order.status);
                const progressPercent = order.status === 'cancelled' ? 0 : 
                                       currentIndex === -1 ? 0 : 
                                       ((currentIndex + 1) / statuses.length) * 100;
              %>
              <div class="progress-fill" style="width: <%= progressPercent %>%"></div>
            </div>
            <div class="progress-steps">
              <% statuses.forEach((status, index) => { %>
                <div class="progress-step <%= currentIndex >= index ? 'active' : '' %>" 
                     title="<%= status.charAt(0).toUpperCase() + status.slice(1) %>">
                  <% if (status === 'pending') { %>⏳
                  <% } else if (status === 'confirmed') { %>✅
                  <% } else if (status === 'preparing') { %>👨‍🍳
                  <% } else if (status === 'ready') { %>🍽️
                  <% } else if (status === 'delivering') { %>🚗
                  <% } else { %>✅<% } %>
                </div>
              <% }) %>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  <% } else { %>
    <div class="no-orders">
      <div class="no-orders-icon">📦</div>
      <h2>No Orders Yet</h2>
      <p>You haven't placed any orders yet. Ready to get started?</p>
      <div class="no-orders-actions">
        <a href="/menu" class="btn-primary">Browse Menu</a>
        <a href="/cart" class="btn-secondary">Check Cart</a>
      </div>
    </div>
  <% } %>
</div>

<script>
function reorderItems(orderId) {
  if (confirm('Add all items from this order to your cart?')) {
    fetch(`/orders/${orderId}/reorder`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('✅ Items added to cart!');
        window.location.href = '/cart';
      } else {
        alert('❌ Failed to add items to cart: ' + data.error);
      }
    })
    .catch(error => {
      console.error('Reorder error:', error);
      alert('❌ Failed to reorder items');
    });
  }
}

function cancelOrder(orderId) {
  if (confirm('Are you sure you want to cancel this order?')) {
    const reason = prompt('Please tell us why you\'re cancelling (optional):') || 'Customer requested cancellation';
    
    fetch(`/orders/${orderId}/cancel`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ reason: reason })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('✅ Order cancelled successfully');
        location.reload();
      } else {
        alert('❌ Failed to cancel order: ' + data.error);
      }
    })
    .catch(error => {
      console.error('Cancel error:', error);
      alert('❌ Failed to cancel order');
    });
  }
}

function trackOrder(orderId) {
  // Enhanced tracking simulation
  const trackingInfo = {
    orderId: orderId,
    status: 'On the way',
    estimatedTime: '15-25 minutes',
    driver: 'John D.',
    phone: '(204) 555-0123',
    vehicle: 'Red Honda Civic',
    updates: [
      { time: '2 min ago', status: 'Driver picked up your order' },
      { time: '5 min ago', status: 'Order ready for pickup' },
      { time: '12 min ago', status: 'Preparing your order' }
    ]
  };
  
  const trackingMessage = `📍 Order #${trackingInfo.orderId} Tracking\n\n` +
    `Status: ${trackingInfo.status}\n` +
    `Estimated delivery: ${trackingInfo.estimatedTime}\n` +
    `Driver: ${trackingInfo.driver}\n` +
    `Contact: ${trackingInfo.phone}\n` +
    `Vehicle: ${trackingInfo.vehicle}\n\n` +
    `Recent updates:\n` +
    trackingInfo.updates.map(u => `• ${u.time}: ${u.status}`).join('\n');
  
  alert(trackingMessage);
}

function leaveReview(orderId) {
  window.location.href = `/reviews?order=${orderId}`;
}

function viewOrderDetails(orderId) {
  window.location.href = `/orders/${orderId}`;
}

// Auto-refresh for active orders
const hasActiveOrders = <%= orders && orders.some(o => ['pending', 'confirmed', 'preparing', 'ready', 'delivering'].includes(o.status)) ? 'true' : 'false' %>;

if (hasActiveOrders) {
  let refreshInterval = setInterval(() => {
    if (document.visibilityState === 'visible') {
      // Only refresh if still on orders page
      if (window.location.pathname === '/orders') {
        location.reload();
      } else {
        clearInterval(refreshInterval);
      }
    }
  }, 30000); // 30 seconds
  
  // Clear interval when page is hidden for too long
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'hidden') {
      setTimeout(() => {
        if (document.visibilityState === 'hidden') {
          clearInterval(refreshInterval);
        }
      }, 60000); // Clear after 1 minute of being hidden
    }
  });
}
</script>

<style>
.orders-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 30px 20px;
}

.orders-header {
  text-align: center;
  margin-bottom: 40px;
}

.orders-header h1 {
  color: var(--primary-red);
  font-size: 2.5em;
  margin-bottom: 10px;
}

.orders-header p {
  color: #666;
  font-size: 1.1em;
}

.orders-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin-bottom: 40px;
}

.stat-item {
  background: white;
  padding: 25px;
  border-radius: 15px;
  text-align: center;
  box-shadow: 0 5px 20px rgba(0,0,0,0.1);
}

.stat-number {
  display: block;
  font-size: 2em;
  font-weight: bold;
  color: var(--primary-red);
  margin-bottom: 5px;
}

.stat-label {
  color: #666;
  font-size: 0.9em;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.orders-grid {
  display: grid;
  gap: 25px;
  margin-bottom: 40px;
}

.order-card {
  background: white;
  border-radius: 15px;
  padding: 25px;
  box-shadow: 0 5px 20px rgba(0,0,0,0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.order-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.order-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding-bottom: 15px;
  border-bottom: 2px solid #f0f0f0;
}

.order-info h3 {
  color: var(--primary-red);
  margin: 0 0 5px 0;
  font-size: 1.3em;
}

.order-date {
  color: #666;
  font-size: 0.9em;
}

.order-status {
  padding: 8px 16px;
  border-radius: 20px;
  font-weight: bold;
  font-size: 0.9em;
  white-space: nowrap;
}

.order-status.pending {
  background: #fff3cd;
  color: #856404;
}

.order-status.confirmed {
  background: #d1ecf1;
  color: #0c5460;
}

.order-status.preparing {
  background: #f8d7da;
  color: #721c24;
}

.order-status.ready {
  background: #d4edda;
  color: #155724;
}

.order-status.delivering {
  background: #cce7ff;
  color: #004085;
}

.order-status.delivered {
  background: #d4edda;
  color: #155724;
}

.order-status.cancelled {
  background: #f8d7da;
  color: #721c24;
}

.order-items h4 {
  color: var(--primary-red);
  margin: 0 0 15px 0;
  font-size: 1.1em;
}

.items-list {
  background: #f8f9fa;
  border-radius: 8px;
  padding: 15px;
}

.order-item {
  display: grid;
  grid-template-columns: 2fr 1fr auto;
  gap: 15px;
  align-items: center;
  padding: 8px 0;
  border-bottom: 1px solid #e9ecef;
}

.order-item:last-child {
  border-bottom: none;
}

.item-name {
  font-weight: 600;
  color: #333;
}

.item-details {
  color: #666;
  font-size: 0.9em;
}

.item-subtotal {
  font-weight: bold;
  color: var(--accent-yellow);
  text-align: right;
}

.order-total {
  margin: 20px 0;
  padding: 20px;
  background: linear-gradient(135deg, rgba(214,40,40,0.05), rgba(247,127,0,0.05));
  border-radius: 10px;
}

.total-breakdown {
  max-width: 300px;
  margin-left: auto;
}

.total-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 5px 0;
  color: #666;
}

.total-final {
  border-top: 2px solid #e0e0e0;
  margin-top: 10px;
  padding-top: 10px;
  font-size: 1.1em;
  font-weight: bold;
  color: var(--primary-red) !important;
}

.order-actions {
  display: flex;
  gap: 10px;
  margin: 20px 0;
  flex-wrap: wrap;
}

.action-btn {
  padding: 10px 16px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9em;
  font-weight: 600;
  transition: all 0.3s;
  white-space: nowrap;
}

.action-btn.reorder {
  background: var(--accent-green);
  color: white;
}

.action-btn.reorder:hover {
  background: #6a9f17;
}

.action-btn.review {
  background: var(--accent-yellow);
  color: white;
}

.action-btn.review:hover {
  background: #ea580c;
}

.action-btn.cancel {
  background: #dc3545;
  color: white;
}

.action-btn.cancel:hover {
  background: #c82333;
}

.action-btn.track {
  background: #17a2b8;
  color: white;
}

.action-btn.track:hover {
  background: #138496;
}

.action-btn.details {
  background: #6c757d;
  color: white;
}

.action-btn.details:hover {
  background: #5a6268;
}

.order-progress {
  margin-top: 20px;
}

.progress-bar {
  width: 100%;
  height: 6px;
  background: #e9ecef;
  border-radius: 3px;
  overflow: hidden;
  margin-bottom: 10px;
}

.progress-fill {
  height: 100%;
  background: linear-gradient(90deg, var(--primary-red), var(--accent-yellow));
  transition: width 0.5s ease;
}

.progress-steps {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.progress-step {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: #e9ecef;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1em;
  transition: all 0.3s;
  cursor: help;
}

.progress-step.active {
  background: var(--accent-yellow);
  color: white;
  transform: scale(1.1);
}

.no-orders {
  text-align: center;
  padding: 80px 20px;
  background: white;
  border-radius: 15px;
  box-shadow: 0 5px 20px rgba(0,0,0,0.1);
}

.no-orders-icon {
  font-size: 5em;
  margin-bottom: 20px;
  opacity: 0.5;
}

.no-orders h2 {
  color: var(--primary-red);
  margin-bottom: 15px;
}

.no-orders p {
  color: #666;
  font-size: 1.1em;
  margin-bottom: 30px;
}

.no-orders-actions {
  display: flex;
  gap: 15px;
  justify-content: center;
}

.btn-primary, .btn-secondary {
  display: inline-block;
  padding: 15px 30px;
  text-decoration: none;
  border-radius: 8px;
  font-weight: bold;
  font-size: 1.1em;
  transition: all 0.3s;
}

.btn-primary {
  background: var(--primary-red);
  color: white;
}

.btn-primary:hover {
  background: #b91c1c;
  transform: translateY(-2px);
}

.btn-secondary {
  background: var(--accent-yellow);
  color: white;
}

.btn-secondary:hover {
  background: #ea580c;
  transform: translateY(-2px);
}

@media (max-width: 768px) {
  .orders-container {
    padding: 20px 15px;
  }
  
  .order-header {
    flex-direction: column;
    gap: 15px;
    text-align: center;
  }
  
  .order-item {
    grid-template-columns: 1fr;
    text-align: center;
    gap: 5px;
  }
  
  .total-breakdown {
    max-width: none;
    margin: 0;
  }
  
  .order-actions {
    justify-content: center;
  }
  
  .action-btn {
    flex: 1;
    min-width: 120px;
  }
  
  .progress-steps {
    gap: 5px;
  }
  
  .progress-step {
    width: 25px;
    height: 25px;
    font-size: 0.8em;
  }
  
  .no-orders-actions {
    flex-direction: column;
    align-items: center;
  }
  
  .btn-primary, .btn-secondary {
    width: 200px;
  }
}
</style>

<%- include('../partials/footer') %>
