<%- include('../partials/header', { title: title, user: user }) %>

<div class="admin-orders-container">
  <div class="orders-header">
    <h1>üì¶ Order Management</h1>
    <div class="header-actions">
      <button onclick="bulkUpdateStatus()" class="btn btn-primary">Bulk Update</button>
      <a href="/admin" class="btn btn-secondary">‚Üê Back to Dashboard</a>
    </div>
  </div>

  <!-- Quick Stats -->
  <div class="order-stats">
    <div class="stat-card">
      <span class="stat-label">Pending</span>
      <span class="stat-value"><%= orders.filter(o => o.status === 'pending').length %></span>
    </div>
    <div class="stat-card">
      <span class="stat-label">Preparing</span>
      <span class="stat-value"><%= orders.filter(o => o.status === 'preparing').length %></span>
    </div>
    <div class="stat-card">
      <span class="stat-label">Delivering</span>
      <span class="stat-value"><%= orders.filter(o => o.status === 'delivering').length %></span>
    </div>
    <div class="stat-card">
      <span class="stat-label">Delivered</span>
      <span class="stat-value"><%= orders.filter(o => o.status === 'delivered').length %></span>
    </div>
  </div>

  <!-- Orders Table -->
  <div class="orders-table-container">
    <table class="orders-table">
      <thead>
        <tr>
          <th><input type="checkbox" id="selectAll" onchange="toggleSelectAll()"></th>
          <th>Order #</th>
          <th>Customer</th>
          <th>Items</th>
          <th>Total</th>
          <th>Status</th>
          <th>Created</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% orders.forEach(order => { %>
          <tr data-order-id="<%= order.id %>">
            <td>
              <input type="checkbox" class="order-select" value="<%= order.id %>">
            </td>
            <td>
              <strong><%= order.orderNumber || '#' + order.id %></strong>
            </td>
            <td>
              <%= order.customer ? order.customer.username : 'Customer #' + order.userId %>
              <br>
              <small><%= order.customer ? order.customer.email : '' %></small>
            </td>
            <td>
              <% 
                let items = [];
                try {
                  items = JSON.parse(order.items);
                } catch(e) {}
              %>
              <%= items.map(i => i.name).join(', ').substring(0, 50) %>...
            </td>
            <td>
              $<%= order.totalAmount.toFixed(2) %>
            </td>
            <td>
              <select class="status-select" onchange="updateOrderStatus(<%= order.id %>, this.value)">
                <option value="pending" <%= order.status === 'pending' ? 'selected' : '' %>>Pending</option>
                <option value="confirmed" <%= order.status === 'confirmed' ? 'selected' : '' %>>Confirmed</option>
                <option value="preparing" <%= order.status === 'preparing' ? 'selected' : '' %>>Preparing</option>
                <option value="ready" <%= order.status === 'ready' ? 'selected' : '' %>>Ready</option>
                <option value="delivering" <%= order.status === 'delivering' ? 'selected' : '' %>>Delivering</option>
                <option value="delivered" <%= order.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                <option value="cancelled" <%= order.status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
              </select>
            </td>
            <td>
              <%= new Date(order.createdAt).toLocaleString() %>
            </td>
            <td>
              <button onclick="viewOrder('<%= order.orderNumber %>')" class="btn-small btn-view">View</button>
              <button onclick="markDelivered(<%= order.id %>)" class="btn-small btn-deliver">Deliver</button>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
</div>

<script>
function updateOrderStatus(orderId, newStatus) {
  if (!confirm(`Change order ${orderId} status to ${newStatus}?`)) {
    location.reload(); // Reset dropdown if cancelled
    return;
  }
  
  fetch(`/admin/orders/${orderId}/status`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      newStatus: newStatus,
      skipValidation: 'true' // Admin can skip validation
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert(`‚úÖ ${data.message}`);
      location.reload();
    } else {
      alert(`‚ùå Error: ${data.error}`);
      location.reload();
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Failed to update order status');
    location.reload();
  });
}

function markDelivered(orderId) {
  updateOrderStatus(orderId, 'delivered');
}

function viewOrder(orderNumber) {
  window.open(`/orders/${orderNumber}`, '_blank');
}

function toggleSelectAll() {
  const selectAll = document.getElementById('selectAll');
  const checkboxes = document.querySelectorAll('.order-select');
  checkboxes.forEach(cb => cb.checked = selectAll.checked);
}

function bulkUpdateStatus() {
  const selected = Array.from(document.querySelectorAll('.order-select:checked')).map(cb => cb.value);
  
  if (selected.length === 0) {
    alert('Please select orders to update');
    return;
  }
  
  const newStatus = prompt('Enter new status (pending/confirmed/preparing/ready/delivering/delivered/cancelled):');
  
  if (!newStatus) return;
  
  if (!confirm(`Update ${selected.length} orders to ${newStatus}?`)) return;
  
  fetch('/admin/orders/bulk-status', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      orderIds: selected,
      newStatus: newStatus
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      alert(`‚úÖ ${data.message}`);
      location.reload();
    } else {
      alert(`‚ùå Error: ${data.error}`);
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Bulk update failed');
  });
}
</script>

<style>
.admin-orders-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 30px 20px;
}

.orders-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.orders-header h1 {
  color: var(--primary-red);
  margin: 0;
}

.header-actions {
  display: flex;
  gap: 15px;
}

.order-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.stat-card {
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 3px 10px rgba(0,0,0,0.1);
  text-align: center;
}

.stat-label {
  display: block;
  color: #666;
  font-size: 0.9em;
  margin-bottom: 5px;
}

.stat-value {
  display: block;
  font-size: 2em;
  font-weight: bold;
  color: var(--primary-red);
}

.orders-table-container {
  background: white;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 3px 10px rgba(0,0,0,0.1);
}

.orders-table {
  width: 100%;
  border-collapse: collapse;
}

.orders-table th {
  background: var(--primary-red);
  color: white;
  padding: 15px;
  text-align: left;
  font-weight: 600;
}

.orders-table td {
  padding: 12px 15px;
  border-bottom: 1px solid #f0f0f0;
}

.orders-table tbody tr:hover {
  background: #f8f9fa;
}

.status-select {
  padding: 5px 10px;
  border: 1px solid #ddd;
  border-radius: 5px;
  cursor: pointer;
}

.btn-small {
  padding: 5px 10px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9em;
  margin: 0 2px;
}

.btn-view {
  background: #17a2b8;
  color: white;
}

.btn-deliver {
  background: #28a745;
  color: white;
}

.btn-small:hover {
  opacity: 0.8;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
}

.btn-primary {
  background: var(--primary-red);
  color: white;
}

.btn-secondary {
  background: #6c757d;
  color: white;
}
</style>

<%- include('../partials/footer') %>
