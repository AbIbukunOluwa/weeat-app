const { DataTypes, Model } = require('sequelize');

class Vulnerability extends Model {
  static initModel(sequelize) {
    Vulnerability.init({
      title: { 
        type: DataTypes.STRING, 
        allowNull: false 
      },
      description: { 
        type: DataTypes.TEXT, 
        allowNull: false 
      },
      severity: { 
        type: DataTypes.STRING, 
        allowNull: false 
      },
      resolved: { 
        type: DataTypes.BOOLEAN, 
        defaultValue: false 
      },
      assignedTo: { 
        type: DataTypes.INTEGER,
        allowNull: true
      },
      // ADD THESE THREE MISSING COLUMNS:
      flag: {
        type: DataTypes.STRING(255),
        allowNull: true
      },
      found: {
        type: DataTypes.BOOLEAN,
        defaultValue: false
      },
      resolvedAt: {
        type: DataTypes.DATE,
        allowNull: true
      }
    }, { 
      sequelize, 
      modelName: 'Vulnerability', 
      tableName: 'vulnerabilities',
      timestamps: true // This adds createdAt and updatedAt
    });
  }

  static associate(models) {
    // Add associations if needed
    if (models.User) {
      Vulnerability.belongsTo(models.User, { 
        foreignKey: 'assignedTo',
        as: 'assignee'
      });
    }
  }

  // Instance method to mark vulnerability as resolved
  async markResolved() {
    this.resolved = true;
    this.resolvedAt = new Date();
    await this.save();
  }

  // Instance method to mark vulnerability as found
  async markFound() {
    this.found = true;
    await this.save();
  }

  // Static method to get resolved vulnerabilities with flags
  static async getResolvedWithFlags() {
    return await Vulnerability.findAll({
      where: { resolved: true },
      order: [['resolvedAt', 'DESC']]
    });
  }
}

module.exports = Vulnerability;
